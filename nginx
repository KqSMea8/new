手工编译版
yum -y install pcre-devel openssl openssl-devel git gcc
git clone https://github.com/arut/nginx-rtmp-module.git
wget http://nginx.org/download/nginx-1.13.8.tar.gz
tar -zxvf nginx-1.13.8.tar.gz
cd nginx-1.13.8
#自定义安装目录，修改prefix的路径即可
./configure --prefix=/usr/local/nginx  --add-module=../nginx-rtmp-module  --with-http_ssl_module
make && make install

vi /usr/local/nginx/conf/nginx.conf
1）worker_processes 24;//不能超过 CPU 的总核数
2) worker_rlimit_nofile 200000; //ulimit -n 200000
3）worker_connections 要与worker_rlimit_nofile相同
安全组需要放开1935端口。注意分析/usr/local/nginx/logs的日志

定位文件句柄问题：
lsof -n|awk '{print$2}' |sort|uniq -c |sort -nr|more
第一列是打开的文件句柄数量，第二列是进程号
lsof -p 进程号

查看并发请求数及其TCP连接状态
netstat -n | awk '/^tcp/ {++S[$NF]} END {for(a in S) print a, S[a]}'

推流报错errno=99(Cannot assign requested address)
查看端口范围、所有进程打开的文件描述符数、单个进程打开的文件描述符数（soft limit<=hard limit<=nr_open<=file-max）
sysctl net.ipv4.ip_local_port_range
sysctl fs.file-max
sysctl fs.nr_open
修改端口范围
sysctl net.ipv4.ip_local_port_range="1024    65535"

点播
vi /usr/local/nginx/conf/nginx.conf
放到http前面和events之间，与http并列
rtmp {                          #RTMP服务
    server {
        listen 1935;            #//服务端口 
        chunk_size 4096;        #//数据传输块的大小

        application vod {       #//点播
            #Sets location where remote VOD files are stored before playing. Default is /tmp;
            play_temp_path /tmp; #//放到mnt目录下不行/mnt/tmp，需要chmod 1777 /mnt/tmp;chown nobody.root /mnt/tmp
            play /opt/vide/vod;  #//视频文件存放位置,或对象存储路径，注意要用http，不要用https。腾讯尤其注意
            ##Sets location where remote VOD files copied from play_temp_path directory after they are completely downloaded. 
            ##Empty value disables the feature. By default it's empty. The feature can be used for caching remote files locally.
            #play_local_path /tmp; #本地缓存远程文件,把play_temp_path下载的文件缓存起来
            #参数说明见https://github.com/arut/nginx-rtmp-module/wiki/Directives#play_temp_path
        }
    application hls {           #//直播
            live on;     
            hls on;     
            hls_path /tmp/app;  #//直播ts文件存放路径    
            hls_fragment 5s;     
        }  
    }
}

启动服务
cd /usr/local/nginx/sbin
./nginx

下载VLC播放器，打开网络串流
rtmp://49.4.2.7/vod/in4K_3_5G_h264.mp4

srs-bench测试流媒体
https://github.com/ossrs/srs-bench
yum install gcc-c++ unzip git patch -y
git clone https://github.com/simple-rtmp-server/srs-bench.git
cd srs-bench && ./configure && make

点播和直播压测
./objs/sb_rtmp_load -c 1 -r rtmp://127.0.0.1:1935/vod/in4K_3_5G_h264.mp4
./objs/sb_hls_load -c 1 -r http://172.18.205.253/hls/chen.m3u8

添加水印
ffmpeg -i chen-test.mp4 -vf "movie=water.png [logo]; [in][logo] overlay=10:10 [out]" out.mp4

构造推流
./objs/sb_rtmp_publish -i doc/source.200kbps.768x320.flv -c 1 -r rtmp://172.18.205.253:1935/hls/test

参考：http://blog.csdn.net/u011455056/article/details/78775262
失败，会提示
[2018-01-09 11:33:53.542][188][error] rtmp client dump url failed. ret=104 errno=104(Connection reset by peer)


直播

http  location /后面增加
        location /hls {    
           #server hls fragments    
           types{    
             application/vnd.apple.mpegurl m3u8;    
             video/mp2t ts;    
           }    
        alias /tmp/app;  #注意要与hls_path一致
        expires -1;    
        } 
        
视频文件转流（注意test后面关联使用）
ffmpeg -re -i sample.flv -vcodec copy -acodec copy -f flv rtmp://192.168.0.231/hls/test
ffmpeg -re -i sample.flv -r 30 -s 1280*720 -f flv rtmp://192.168.0.231/hls/test
ffmpeg -re -i 920801331E50069CC28342532C7C57A7.flv -vcodec copy -acodec copy -f flv rtmp://192.168.0.231/hls/test
注意：不要用自己转换的flv文件,推流视频文件必须是flv格式视频文件
推流会存到/tmp/app（上面的hls_path）目录下
转流最后会报错，但是不影响
[flv @ 0xf5b540] Failed to update header with correct duration.rate=1087.1kbits/s    
[flv @ 0xf5b540] Failed to update header with correct filesize.

在vlc中打开 测试地址：http://192.168.1.105/hls/test.m3u8
统计信息http://192.168.1.105/stat

参考：http://blog.csdn.net/tao_627/article/details/22271559
