nginx 的性能调优
vi /usr/local/nginx/conf/nginx.conf
1 修改CPU的核心数对应的Nginx work进程，worker进程数量=等于CPU的核数*2倍或1倍
  worker_processes 8;
  
  绑定不同的nginx进程到不同的CPU上：
  worker_cpu_affinity 00000001 00000010 00000100 00001000 00010000 00100000 01000000 10000000;
2 修改文件描述符 ulimit -n  65536, 永久生效可改/etc/sysctl.conf
  worker_rlimit_nofile 102400;  #每个子进程允许打开的文件数
3 修改Linux内核的调度算法    epoll
  use epoll;
4 修改连接数  在理论上来讲是工作进程数* 连接数 但是，Nginx的理论并发值是65536,所以 。。。。。 你懂得
  worker_connections 102400;
5 在多少时间之内要达到多少的并发量就缓存，否则。。。。。。  你懂得

6 （5）的这条规则的前提下，超过并发数量的次数，就缓存

7 定期的对（5）做检查

8 设置分页的buffer 

9 设置存活时间  这是指cline端打开browser页面没有关闭就自动断开的时间
  keepalive_timeout 60;  # 长连接才有意义

10 关闭日志打印
nginx使用长连接后多进程同时写log文件和Linux为了支持多进程访问共享资源引入了锁（mutex_lock，spin_lock，osq_lock等）。 
针对这个问题，现有解决办法就是不记录log，利用以下设置就可以突破写log带来的性能瓶颈： 
access_log /dev/null; //将存储access_log的路径设置为“垃圾桶” 
error_log /dev/null;  //将存储error_log的路径设置为“垃圾桶”

11 隐藏版本信息
   隐藏nginx版本：在server内增加server_tokens off;
   隐藏php版本：  vi /usr/local/php/lib/php.ini, expose_php=off

worker_processes  8;
worker_cpu_affinity 00000001 00000010 00000100 00001000 00010000 00100000 01000000 10000000;
worker_rlimit_nofile 65535;
#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;
#pid        logs/nginx.pid;

events {
    worker_connections  65535; //不能超过内核的net.core.somaxconn
    use epoll;
}


  参考url
  http://blog.51cto.com/13055758/2084529
  http://blog.51cto.com/12227558/2096244
  
  
高并发优化
2.1调整文件访问数量相关参数
修改操作系统参数
ulimit -n 50000

修改nginx.conf
worker_rlimit_nofile 50000;             


2.2调整Socket连接相关参数
修改操作系统参数
vi /etc/sysctl.conf 新增或者修改
net.core.somaxconn = 65535     #最大连接：somaxconn.最大只能调到65535
net.ipv4.tcp_tw_recycle = 1    #加快tcp回收
net.ipv4.tcp_tw_reuse = 1      #空tcp回收
net.ipv4.tcp_syncookies = 0    #去除洪水攻击抵御

sysctl -w net.core.somaxconn=65535
sysctl -w net.ipv4.tcp_tw_recycle=1
sysctl -w net.ipv4.tcp_tw_reuse=1
sysctl -w net.ipv4.tcp_syncookies=0

让sysctl.conf生效
sysctl -p

修改nginx.conf
worker_connections 50000        #每个子进程允许打开的连接数
keepalive_timeout 0             #连接的保持时间
